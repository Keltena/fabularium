diff -r glulxe-master/glkop.c terps/glulxe/glkop.c
54,65d53
< #define CaptureCArray(addr, len, passin)  \
<     (grab_temp_c_array(addr, len, passin))
< #define ReleaseCArray(ptr, addr, len, passout)  \
<     (release_temp_c_array(ptr, addr, len, passout))
< #define CaptureIArray(addr, len, passin)  \
<     (grab_temp_i_array(addr, len, passin))
< #define ReleaseIArray(ptr, addr, len, passout)  \
<     (release_temp_i_array(ptr, addr, len, passout))
< #define CapturePtrArray(addr, len, objclass, passin)  \
<     (grab_temp_ptr_array(addr, len, objclass, passin))
< #define ReleasePtrArray(ptr, addr, len, objclass, passout)  \
<     (release_temp_ptr_array(ptr, addr, len, objclass, passout))
69a58,59
> #define AddressOfArray(addr)                            \
>    ((addr) < ramstart ? (gamefile_start + (addr)) : (memmap + (addr)))
96,166d85
< /* We maintain a linked list of arrays being used for Glk calls. It is
<    only used for integer (glui32) arrays -- char arrays are handled in
<    place. It's not worth bothering with a hash table, since most
<    arrays appear here only momentarily. */
< 
< typedef struct arrayref_struct arrayref_t;
< struct arrayref_struct {
<   void *array;
<   glui32 addr;
<   glui32 elemsize;
<   glui32 len; /* elements */
<   int retained;
<   arrayref_t *next;
< };
< 
< static arrayref_t *arrays = NULL;
< 
< /* We maintain a hash table for each opaque Glk class. classref_t are the
<     nodes of the table, and classtable_t are the tables themselves. */
< 
< typedef struct classref_struct classref_t;
< struct classref_struct {
<   void *obj;
<   glui32 id;
<   int bucknum;
<   classref_t *next;
< };
< 
< #define CLASSHASH_SIZE (31)
< typedef struct classtable_struct {
<   glui32 lastid;
<   classref_t *bucket[CLASSHASH_SIZE];
< } classtable_t;
< 
< /* The list of hash tables, for the classes. */
< static int num_classes = 0;
< classtable_t **classes = NULL;
< 
< static classtable_t *new_classtable(glui32 firstid);
< static void *classes_get(int classid, glui32 objid);
< static classref_t *classes_put(int classid, void *obj, glui32 origid);
< static void classes_remove(int classid, void *obj);
< 
< static gidispatch_rock_t glulxe_classtable_register(void *obj, 
<   glui32 objclass);
< static void glulxe_classtable_unregister(void *obj, glui32 objclass, 
<   gidispatch_rock_t objrock);
< static gidispatch_rock_t glulxe_retained_register(void *array,
<   glui32 len, char *typecode);
< static void glulxe_retained_unregister(void *array, glui32 len, 
<   char *typecode, gidispatch_rock_t objrock);
< static long glulxe_array_locate(void *array, glui32 len,
<   char *typecode, gidispatch_rock_t objrock, int *elemsizeref);
< static gidispatch_rock_t glulxe_array_restore(long bufkey,
<   glui32 len, char *typecode, void **arrayref);
< 
< /* This is only needed for autorestore. */
< extern gidispatch_rock_t glulxe_classtable_register_existing(void *obj,
<   glui32 objclass, glui32 dispid);
< 
< /* The library_select_hook is called every time the VM blocks for input.
<    The app might take this opportunity to autosave, for example. */
< static void (*library_select_hook)(glui32) = NULL;
< 
< static char *grab_temp_c_array(glui32 addr, glui32 len, int passin);
< static void release_temp_c_array(char *arr, glui32 addr, glui32 len, int passout);
< static glui32 *grab_temp_i_array(glui32 addr, glui32 len, int passin);
< static void release_temp_i_array(glui32 *arr, glui32 addr, glui32 len, int passout);
< static void **grab_temp_ptr_array(glui32 addr, glui32 len, int objclass, int passin);
< static void release_temp_ptr_array(void **arr, glui32 addr, glui32 len, int objclass, int passout);
< 
173,174d91
< static char *get_game_id(void);
< 
180,218d96
<   int ix;
<   
<   /* What with one thing and another, this *could* be called more than
<      once. We only need to allocate the tables once. */
<   if (classes)
<       return TRUE;
<   
<   /* Set up the game-ID hook. (This is ifdeffed because not all Glk
<      libraries have this call.) */
< #ifdef GI_DISPA_GAME_ID_AVAILABLE
<   gidispatch_set_game_id_hook(&get_game_id);
< #endif /* GI_DISPA_GAME_ID_AVAILABLE */
<     
<   /* Allocate the class hash tables. */
<   num_classes = gidispatch_count_classes();
<   classes = (classtable_t **)glulx_malloc(num_classes 
<     * sizeof(classtable_t *));
<   if (!classes)
<     return FALSE;
<     
<   for (ix=0; ix<num_classes; ix++) {
<     classes[ix] = new_classtable((glulx_random() % (glui32)(101)) + 1);
<     if (!classes[ix])
<       return FALSE;
<   }
<     
<   /* Set up the two callbacks. */
<   gidispatch_set_object_registry(&glulxe_classtable_register, 
<     &glulxe_classtable_unregister);
<   gidispatch_set_retained_registry(&glulxe_retained_register, 
<     &glulxe_retained_unregister);
<   
<   /* If the library supports autorestore callbacks, set those up too.
<      (These are only used in iosglk, currently.) */
< #ifdef GIDISPATCH_AUTORESTORE_REGISTRY
<   gidispatch_set_autorestore_registry(&glulxe_array_locate,
<     &glulxe_array_restore);
< #endif /* GIDISPATCH_AUTORESTORE_REGISTRY */
<   
255,261d132
<   case 0x00C0: /* select */
<     /* call a library hook on every glk_select() */
<     if (library_select_hook)
<       library_select_hook(arglist[0]);
<     /* but then fall through to full dispatcher, because there's no real
<        need for speed here */
<     goto FullDispatcher;
287d157
<   FullDispatcher:
559c429
<           garglist[gargnum].array = CaptureCArray(varglist[ix], varglist[ix+1], passin);
---
>           garglist[gargnum].array = (void*) AddressOfArray(varglist[ix]);
574c444
<           garglist[gargnum].array = CaptureIArray(varglist[ix], varglist[ix+1], passin);
---
>           garglist[gargnum].array = AddressOfArray(varglist[ix]);
586c456
<           garglist[gargnum].array = CapturePtrArray(varglist[ix], varglist[ix+1], (*cx-'a'), passin);
---
>           garglist[gargnum].array = AddressOfArray(varglist[ix]);
633,642c503
<           if (thisval) {
<             opref = classes_get(*cx-'a', thisval);
<             if (!opref) {
<               fatal_error("Reference to nonexistent Glk object.");
<             }
<           }
<           else {
<             opref = NULL;
<           }
<           garglist[gargnum].opaqueref = opref;
---
>           garglist[gargnum].opaqueref = (void *) thisval;
778d638
<           ReleaseCArray(garglist[gargnum].array, varglist[ix], varglist[ix+1], passout);
785d644
<           ReleaseIArray(garglist[gargnum].array, varglist[ix], varglist[ix+1], passout);
792d650
<           ReleasePtrArray(garglist[gargnum].array, varglist[ix], varglist[ix+1], (*cx-'a'), passout);
828,836c686
<             opref = garglist[gargnum].opaqueref;
<             if (opref) {
<               gidispatch_rock_t objrock = 
<                 gidispatch_get_objrock(opref, *cx-'a');
<               thisval = ((classref_t *)objrock.ptr)->id;
<             }
<             else {
<               thisval = 0;
<             }
---
>             thisval = (glui32)garglist[gargnum].opaqueref;
939c789
<   return classes_get(gidisp_Class_Stream, objid);
---
>   return (strid_t) objid;
947,948d796
<   gidispatch_rock_t objrock;
< 
952,955c800
<   objrock = gidispatch_get_objrock(win, gidisp_Class_Window);
<   if (!objrock.ptr)
<     return 0;
<   return ((classref_t *)objrock.ptr)->id;
---
>   return (glui32) win;
963,964d807
<   gidispatch_rock_t objrock;
< 
968,971c811
<   objrock = gidispatch_get_objrock(str, gidisp_Class_Stream);
<   if (!objrock.ptr)
<     return 0;
<   return ((classref_t *)objrock.ptr)->id;
---
>   return (glui32) str;
979,980d818
<   gidispatch_rock_t objrock;
< 
984,987c822
<   objrock = gidispatch_get_objrock(fref, gidisp_Class_Fileref);
<   if (!objrock.ptr)
<     return 0;
<   return ((classref_t *)objrock.ptr)->id;
---
>   return (glui32) fref;
995,996d829
<   gidispatch_rock_t objrock;
< 
1000,1513c833
<   objrock = gidispatch_get_objrock(schan, gidisp_Class_Schannel);
<   if (!objrock.ptr)
<     return 0;
<   return ((classref_t *)objrock.ptr)->id;
< }
< 
< /* Build a hash table to hold a set of Glk objects. */
< static classtable_t *new_classtable(glui32 firstid)
< {
<   int ix;
<   classtable_t *ctab = (classtable_t *)glulx_malloc(sizeof(classtable_t));
<   if (!ctab)
<     return NULL;
<     
<   for (ix=0; ix<CLASSHASH_SIZE; ix++)
<     ctab->bucket[ix] = NULL;
<     
<   ctab->lastid = firstid;
<     
<   return ctab;
< }
< 
< /* Find a Glk object in the appropriate hash table. */
< static void *classes_get(int classid, glui32 objid)
< {
<   classtable_t *ctab;
<   classref_t *cref;
<   if (classid < 0 || classid >= num_classes)
<     return NULL;
<   ctab = classes[classid];
<   cref = ctab->bucket[objid % CLASSHASH_SIZE];
<   for (; cref; cref = cref->next) {
<     if (cref->id == objid)
<       return cref->obj;
<   }
<   return NULL;
< }
< 
< /* Put a Glk object in the appropriate hash table. If origid is zero,
<    invent a new unique ID for it. */
< static classref_t *classes_put(int classid, void *obj, glui32 origid)
< {
<   int bucknum;
<   classtable_t *ctab;
<   classref_t *cref;
<   if (classid < 0 || classid >= num_classes)
<     return NULL;
<   ctab = classes[classid];
<   cref = (classref_t *)glulx_malloc(sizeof(classref_t));
<   if (!cref)
<     return NULL;
<   cref->obj = obj;
<   if (!origid) {
<     cref->id = ctab->lastid;
<     ctab->lastid++;
<   }
<   else {
<     cref->id = origid;
<     if (ctab->lastid <= origid)
<       ctab->lastid = origid+1;
<   }
<   bucknum = cref->id % CLASSHASH_SIZE;
<   cref->bucknum = bucknum;
<   cref->next = ctab->bucket[bucknum];
<   ctab->bucket[bucknum] = cref;
<   return cref;
< }
< 
< /* Delete a Glk object from the appropriate hash table. */
< static void classes_remove(int classid, void *obj)
< {
<   classtable_t *ctab;
<   classref_t *cref;
<   classref_t **crefp;
<   gidispatch_rock_t objrock;
<   if (classid < 0 || classid >= num_classes)
<     return;
<   ctab = classes[classid];
<   objrock = gidispatch_get_objrock(obj, classid);
<   cref = objrock.ptr;
<   if (!cref)
<     return;
<   crefp = &(ctab->bucket[cref->bucknum]);
<   for (; *crefp; crefp = &((*crefp)->next)) {
<     if ((*crefp) == cref) {
<       *crefp = cref->next;
<       if (!cref->obj) {
<         nonfatal_warning("attempt to free NULL object!");
<       }
<       cref->obj = NULL;
<       cref->id = 0;
<       cref->next = NULL;
<       glulx_free(cref);
<       return;
<     }
<   }
<   return;
< }
< 
< /* The object registration/unregistration callbacks that the library calls
<     to keep the hash tables up to date. */
<     
< static gidispatch_rock_t glulxe_classtable_register(void *obj, 
<   glui32 objclass)
< {
<   classref_t *cref;
<   gidispatch_rock_t objrock;
<   cref = classes_put(objclass, obj, 0);
<   objrock.ptr = cref;
<   return objrock;
< }
< 
< static void glulxe_classtable_unregister(void *obj, glui32 objclass, 
<   gidispatch_rock_t objrock)
< {
<   classes_remove(objclass, obj);
< }
< 
< gidispatch_rock_t glulxe_classtable_register_existing(void *obj,
<   glui32 objclass, glui32 dispid)
< {
<   classref_t *cref;
<   gidispatch_rock_t objrock;
<   cref = classes_put(objclass, obj, dispid);
<   objrock.ptr = cref;
<   return objrock;
< }
< 
< static char *grab_temp_c_array(glui32 addr, glui32 len, int passin)
< {
<   arrayref_t *arref = NULL;
<   char *arr = NULL;
<   glui32 ix, addr2;
< 
<   if (len) {
<     arr = (char *)glulx_malloc(len * sizeof(char));
<     arref = (arrayref_t *)glulx_malloc(sizeof(arrayref_t));
<     if (!arr || !arref) 
<       fatal_error("Unable to allocate space for array argument to Glk call.");
< 
<     arref->array = arr;
<     arref->addr = addr;
<     arref->elemsize = 1;
<     arref->retained = FALSE;
<     arref->len = len;
<     arref->next = arrays;
<     arrays = arref;
< 
<     if (passin) {
<       for (ix=0, addr2=addr; ix<len; ix++, addr2+=1) {
<         arr[ix] = Mem1(addr2);
<       }
<     }
<   }
< 
<   return arr;
< }
< 
< static void release_temp_c_array(char *arr, glui32 addr, glui32 len, int passout)
< {
<   arrayref_t *arref = NULL;
<   arrayref_t **aptr;
<   glui32 ix, val, addr2;
< 
<   if (arr) {
<     for (aptr=(&arrays); (*aptr); aptr=(&((*aptr)->next))) {
<       if ((*aptr)->array == arr)
<         break;
<     }
<     arref = *aptr;
<     if (!arref)
<       fatal_error("Unable to re-find array argument in Glk call.");
<     if (arref->addr != addr || arref->len != len)
<       fatal_error("Mismatched array argument in Glk call.");
< 
<     if (arref->retained) {
<       return;
<     }
< 
<     *aptr = arref->next;
<     arref->next = NULL;
< 
<     if (passout) {
<       for (ix=0, addr2=addr; ix<len; ix++, addr2+=1) {
<         val = arr[ix];
<         MemW1(addr2, val);
<       }
<     }
<     glulx_free(arr);
<     glulx_free(arref);
<   }
< }
< 
< static glui32 *grab_temp_i_array(glui32 addr, glui32 len, int passin)
< {
<   arrayref_t *arref = NULL;
<   glui32 *arr = NULL;
<   glui32 ix, addr2;
< 
<   if (len) {
<     arr = (glui32 *)glulx_malloc(len * sizeof(glui32));
<     arref = (arrayref_t *)glulx_malloc(sizeof(arrayref_t));
<     if (!arr || !arref) 
<       fatal_error("Unable to allocate space for array argument to Glk call.");
< 
<     arref->array = arr;
<     arref->addr = addr;
<     arref->elemsize = 4;
<     arref->retained = FALSE;
<     arref->len = len;
<     arref->next = arrays;
<     arrays = arref;
< 
<     if (passin) {
<       for (ix=0, addr2=addr; ix<len; ix++, addr2+=4) {
<         arr[ix] = Mem4(addr2);
<       }
<     }
<   }
< 
<   return arr;
< }
< 
< static void release_temp_i_array(glui32 *arr, glui32 addr, glui32 len, int passout)
< {
<   arrayref_t *arref = NULL;
<   arrayref_t **aptr;
<   glui32 ix, val, addr2;
< 
<   if (arr) {
<     for (aptr=(&arrays); (*aptr); aptr=(&((*aptr)->next))) {
<       if ((*aptr)->array == arr)
<         break;
<     }
<     arref = *aptr;
<     if (!arref)
<       fatal_error("Unable to re-find array argument in Glk call.");
<     if (arref->addr != addr || arref->len != len)
<       fatal_error("Mismatched array argument in Glk call.");
< 
<     if (arref->retained) {
<       return;
<     }
< 
<     *aptr = arref->next;
<     arref->next = NULL;
< 
<     if (passout) {
<       for (ix=0, addr2=addr; ix<len; ix++, addr2+=4) {
<         val = arr[ix];
<         MemW4(addr2, val);
<       }
<     }
<     glulx_free(arr);
<     glulx_free(arref);
<   }
< }
< 
< static void **grab_temp_ptr_array(glui32 addr, glui32 len, int objclass, int passin)
< {
<   arrayref_t *arref = NULL;
<   void **arr = NULL;
<   glui32 ix, addr2;
< 
<   if (len) {
<     arr = (void **)glulx_malloc(len * sizeof(void *));
<     arref = (arrayref_t *)glulx_malloc(sizeof(arrayref_t));
<     if (!arr || !arref) 
<       fatal_error("Unable to allocate space for array argument to Glk call.");
< 
<     arref->array = arr;
<     arref->addr = addr;
<     arref->elemsize = sizeof(void *);
<     arref->retained = FALSE;
<     arref->len = len;
<     arref->next = arrays;
<     arrays = arref;
< 
<     if (passin) {
<       for (ix=0, addr2=addr; ix<len; ix++, addr2+=4) {
<         glui32 thisval = Mem4(addr2);
<         if (thisval)
<           arr[ix] = classes_get(objclass, thisval);
<         else
<           arr[ix] = NULL;
<       }
<     }
<   }
< 
<   return arr;
< }
< 
< static void release_temp_ptr_array(void **arr, glui32 addr, glui32 len, int objclass, int passout)
< {
<   arrayref_t *arref = NULL;
<   arrayref_t **aptr;
<   glui32 ix, val, addr2;
< 
<   if (arr) {
<     for (aptr=(&arrays); (*aptr); aptr=(&((*aptr)->next))) {
<       if ((*aptr)->array == arr)
<         break;
<     }
<     arref = *aptr;
<     if (!arref)
<       fatal_error("Unable to re-find array argument in Glk call.");
<     if (arref->addr != addr || arref->len != len)
<       fatal_error("Mismatched array argument in Glk call.");
< 
<     if (arref->retained) {
<       return;
<     }
< 
<     *aptr = arref->next;
<     arref->next = NULL;
< 
<     if (passout) {
<       for (ix=0, addr2=addr; ix<len; ix++, addr2+=4) {
<         void *opref = arr[ix];
<         if (opref) {
<           gidispatch_rock_t objrock = 
<             gidispatch_get_objrock(opref, objclass);
<           val = ((classref_t *)objrock.ptr)->id;
<         }
<         else {
<           val = 0;
<         }
<         MemW4(addr2, val);
<       }
<     }
<     glulx_free(arr);
<     glulx_free(arref);
<   }
< }
< 
< static gidispatch_rock_t glulxe_retained_register(void *array,
<   glui32 len, char *typecode)
< {
<   gidispatch_rock_t rock;
<   arrayref_t *arref = NULL;
<   arrayref_t **aptr;
<   int elemsize = 0;
< 
<   if (typecode[4] == 'C')
<     elemsize = 1;
<   else if (typecode[4] == 'I')
<     elemsize = 4;
< 
<   if (!elemsize || array == NULL) {
<     rock.ptr = NULL;
<     return rock;
<   }
< 
<   for (aptr=(&arrays); (*aptr); aptr=(&((*aptr)->next))) {
<     if ((*aptr)->array == array)
<       break;
<   }
<   arref = *aptr;
<   if (!arref)
<     fatal_error("Unable to re-find array argument in Glk call.");
<   if (arref->elemsize != elemsize || arref->len != len)
<     fatal_error("Mismatched array argument in Glk call.");
< 
<   arref->retained = TRUE;
< 
<   rock.ptr = arref;
<   return rock;
< }
< 
< static void glulxe_retained_unregister(void *array, glui32 len,
<   char *typecode, gidispatch_rock_t objrock)
< {
<   arrayref_t *arref = NULL;
<   arrayref_t **aptr;
<   glui32 ix, addr2, val;
<   int elemsize = 0;
< 
<   if (typecode[4] == 'C')
<     elemsize = 1;
<   else if (typecode[4] == 'I')
<     elemsize = 4;
< 
<   if (!elemsize || array == NULL) {
<     return;
<   }
< 
<   for (aptr=(&arrays); (*aptr); aptr=(&((*aptr)->next))) {
<     if ((*aptr)->array == array)
<       break;
<   }
<   arref = *aptr;
<   if (!arref)
<     fatal_error("Unable to re-find array argument in Glk call.");
<   if (arref != objrock.ptr)
<     fatal_error("Mismatched array reference in Glk call.");
<   if (!arref->retained)
<     fatal_error("Unretained array reference in Glk call.");
<   if (arref->elemsize != elemsize || arref->len != len)
<     fatal_error("Mismatched array argument in Glk call.");
< 
<   *aptr = arref->next;
<   arref->next = NULL;
< 
<   if (elemsize == 1) {
<     for (ix=0, addr2=arref->addr; ix<arref->len; ix++, addr2+=1) {
<       val = ((char *)array)[ix];
<       MemW1(addr2, val);
<     }
<   }
<   else if (elemsize == 4) {
<     for (ix=0, addr2=arref->addr; ix<arref->len; ix++, addr2+=4) {
<       val = ((glui32 *)array)[ix];
<       MemW4(addr2, val);
<     }
<   }
< 
<   glulx_free(array);
<   glulx_free(arref);
< }
< 
< static long glulxe_array_locate(void *array, glui32 len,
<   char *typecode, gidispatch_rock_t objrock, int *elemsizeref)
< {
<   arrayref_t *arref = NULL;
<   arrayref_t **aptr;
<   int elemsize = 0;
< 
<   if (typecode[4] == 'C')
<     elemsize = 1;
<   else if (typecode[4] == 'I')
<     elemsize = 4;
< 
<   if (!elemsize || array == NULL) {
<     *elemsizeref = 0; /* No need to save the array separately */
<     return (unsigned char *)array - memmap;
<   }
<   
<   for (aptr=(&arrays); (*aptr); aptr=(&((*aptr)->next))) {
<     if ((*aptr)->array == array)
<       break;
<   }
<   arref = *aptr;
<   if (!arref)
<     fatal_error("Unable to re-find array argument in array_locate.");
<   if (arref != objrock.ptr)
<     fatal_error("Mismatched array reference in array_locate.");
<   if (!arref->retained)
<     fatal_error("Unretained array reference in array_locate.");
<   if (arref->elemsize != elemsize || arref->len != len)
<     fatal_error("Mismatched array argument in array_locate.");
<   
<   *elemsizeref = arref->elemsize;
<   return arref->addr;
< }
< 
< static gidispatch_rock_t glulxe_array_restore(long bufkey,
<   glui32 len, char *typecode, void **arrayref)
< {
<   gidispatch_rock_t rock;
<   int elemsize = 0;
< 
<   if (typecode[4] == 'C')
<     elemsize = 1;
<   else if (typecode[4] == 'I')
<     elemsize = 4;
< 
<   if (!elemsize) {
<     unsigned char *buf = memmap + bufkey;
<     *arrayref = buf;
<     rock.ptr = NULL;
<     return rock;
<   }
< 
<   if (elemsize == 1) {
<     char *cbuf = grab_temp_c_array(bufkey, len, FALSE);
<     rock = glulxe_retained_register(cbuf, len, typecode);
<     *arrayref = cbuf;
<   }
<   else {
<     glui32 *ubuf = grab_temp_i_array(bufkey, len, FALSE);
<     rock = glulxe_retained_register(ubuf, len, typecode);
<     *arrayref = ubuf;
<   }
<   return rock;
< }
< 
< void set_library_select_hook(void (*func)(glui32))
< {
<   library_select_hook = func;
< }
< 
< /* Create a string identifying this game. We use the first 64 bytes of the
<    memory map, encoded as hex,
< */
< static char *get_game_id()
< {
<   /* This buffer gets rewritten on every call, but that's okay -- the caller
<      is supposed to copy out the result. */
<   static char buf[2*64+2];
<   int ix, jx;
< 
<   if (!memmap)
<     return NULL;
< 
<   for (ix=0, jx=0; ix<64; ix++) {
<     char ch = memmap[ix];
<     int val = ((ch >> 4) & 0x0F);
<     buf[jx++] = ((val < 10) ? (val + '0') : (val + 'A' - 10));
<     val = (ch & 0x0F);
<     buf[jx++] = ((val < 10) ? (val + '0') : (val + 'A' - 10));
<   }
<   buf[jx++] = '\0';
< 
<   return buf;
---
>   return (glui32) schan;
