diff -r scare-1.3.10/source/os_glk.c terps/scare/source/os_glk.c
1704a1705,1817
> #ifdef FAB
> 
> /* Fabularium addition - 2016: we follow the same tactic as the HUGO media */
> #define PIC 0
> #define SND 1
> #define MAXRES 1024
> 
> static long resids[2][MAXRES];
> static int numres[2] = { 0, 0 };
> static schanid_t schannel = NULL;
> static char *gsclinux_game_file = NULL;
> 
> static int loadres(FILE* infile, int reslen, int type)
> {
> 	char buf[4096];
> 	frefid_t fileref;
> 	strid_t stream;
> 	long offset;
> 	int id;
> 	int i, n;
> 
> 	offset = ftell(infile);
> 	for (i = 0; i < numres[type]; i++)
> 		if (resids[type][i] == offset)
> 			return i;
> 
> 	/* Too many resources loaded... */
> 	if (numres[type] + 1 == MAXRES)
> 		return -1;
> 
> 	id = numres[type]++;
> 	sprintf(buf, "%s%d", type == PIC ? "PIC" : "SND", id);
> 	resids[type][id] = offset;
> 
> 	fileref = glk_fileref_create_by_name(fileusage_Data, buf, 0);
> 	if (!fileref)
> 	{
> 		return -1;
> 	}
> 
> 	stream = glk_stream_open_file(fileref, filemode_Write, 0);
> 	if (!stream)
> 	{
> 		glk_fileref_destroy(fileref);
> 		return -1;
> 	}
> 
> 	glk_fileref_destroy(fileref);
> 
> 	while (reslen > 0)
> 	{
> 		n = fread(buf, 1, reslen < sizeof buf ? reslen : sizeof buf, infile);
> 		if (n <= 0)
> 			break;
> 		glk_put_buffer_stream(stream, buf, n);
> 		reslen -= n;
> 	}
> 
> 	glk_stream_close(stream, NULL);
> 
> 	return id;
> }
> 
> void initsound()
> {
> 	if (!glk_gestalt(gestalt_Sound, 0))
> 		return;
> 	schannel = glk_schannel_create(0);
> }
> 
> void
> os_play_sound (const sc_char *filepath,
>                sc_int offset, sc_int length, sc_bool is_looping)
> {
>   const sc_char *unused1;
>   unused1 = filepath;
>  
>   if (!schannel) initsound();
> 
> 	if (schannel && length > 0)
> 	{
>     FILE* f = fopen(gsclinux_game_file, "r");
>     int id;
>     if (f == NULL) {
>       /* error */
>       return;
>     }
>     if (fseek(f, offset, SEEK_SET) < 0) {
>       /* error */
>       fclose(f);
>       return;
>     }
>     id = loadres(f, length, SND);
>     if (id < 0) {
>       /* error */
> 		  fclose(f);
> 		  return;
> 	  }
>     fclose(f);
> 		glk_schannel_play_ext(schannel, id, is_looping ? -1 : 1, 0);
> 	}
> }
> 
> void
> os_stop_sound (void)
> {
>   if (!schannel) initsound();
> 	if (!schannel) return;
> 	glk_schannel_stop(schannel);
> }
> 
> #else
> 
1728c1841
< 
---
> #endif
1773a1887,1919
> #ifdef FAB
> void
> os_show_graphic (const sc_char *filepath, sc_int offset, sc_int length)
> {
>   const sc_char *unused1;
>   unused1 = filepath;
> 
>   if (length > 0) {
>     FILE* f = fopen(gsclinux_game_file, "r");
>     int id;
>     if (f == NULL) {
>       /* error */
>       return;
>     }
>     if (fseek(f, offset, SEEK_SET) < 0) {
>       /* error */
>       fclose(f);
>       return;
>     }
>     id = loadres(f, length, PIC);
>     if (id < 0) {
>       /* error */
> 		  fclose(f);
> 		  return;
> 	  }
>     fclose(f);
> 
> 	  /* Draw, then move cursor down to the next line. */
> 	  glk_image_draw(gsc_main_window, id, imagealign_InlineUp, 0);
>     glk_put_char('\n');
>   }
> }
> #else
1783a1930
> #endif
3455c3602
< #ifdef LINUX_GRAPHICS
---
> #if defined(LINUX_GRAPHICS) || defined(FAB)
